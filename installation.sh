#!/bin/bash

clear

# Colors
RED='\033[1;91m'
GREEN='\033[1;92m'
YELLOW='\033[1;93m'
BLUE='\033[1;94m'
CYAN='\033[1;96m'
MAGENTA='\033[1;95m'
PURPLE='\033[1;35m'
ORANGE='\033[1;33m'
NC='\033[0m'

# ASCII Header
echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo -e "${CYAN}‚ïë${BLUE} ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó ${CYAN}‚ïë"
echo -e "${CYAN}‚ïë${GREEN} ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù ${CYAN}‚ïë"
echo -e "${CYAN}‚ïë${YELLOW} ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó   ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù  ${CYAN}‚ïë"
echo -e "${CYAN}‚ïë${RED} ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù   ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó  ${CYAN}‚ïë"
echo -e "${CYAN}‚ïë${MAGENTA} ‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó ${CYAN}‚ïë"
echo -e "${CYAN}‚ïë${PURPLE} ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ${CYAN}‚ïë"
echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"

# Warning
echo -e "\n${RED}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo -e "‚ïë${YELLOW}                   WARNING - IMPORTANT NOTICE                  ‚ïë"
echo -e "‚ïë${RED}                                                              ‚ïë"
echo -e "‚ïë${YELLOW}   This software is provided for EDUCATIONAL PURPOSES ONLY.   ‚ïë"
echo -e "‚ïë${RED}   The developer and ACCsi Forex are not responsible for any    ‚ïë"
echo -e "‚ïë${RED}   misuse of this software or any consequences that may arise.  ‚ïë"
echo -e "‚ïë${YELLOW}   Use at your own risk.                                      ‚ïë"
echo -e "‚ïë${RED}                                                              ‚ïë"
echo -e "‚ïë${CYAN}   Developed by: Abdul Qadeer Gabol                            ‚ïë"
echo -e "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"

echo -ne "\n${YELLOW}‚û§ ${CYAN}Do you accept these terms? [${GREEN}1${CYAN} = Yes/${RED}2${CYAN} = No]: ${NC}"
read choice
[[ "$choice" != "1" ]] && echo -e "\n${RED}‚úó Installation aborted. Terms not accepted.${NC}" && exit 1

clear

# OS Detect
if [[ $(uname -o 2>/dev/null) == *Android* ]]; then
    OS="termux"
    BIN_DIR="$PREFIX/bin"
    echo -e "${GREEN}‚úì Running on ${CYAN}Termux${GREEN} (Android)${NC}"
else
    OS="ubuntu"
    BIN_DIR="/usr/local/bin"
    echo -e "${GREEN}‚úì Running on ${CYAN}Ubuntu/Linux${NC}"
fi
sleep 1

# Spinner Progress Bar
show_progress() {
    local msg=$1
    local emoji=$2
    echo -ne "\n${PURPLE}${emoji} ${MAGENTA}${msg}${NC}\n"
    local bar=""
    local spin=("-" "\\" "|" "/")
    local spin_idx=0
    for i in {1..50}; do
        bar+="‚ñì"
        printf "\r${CYAN}[${GREEN}%-50s${CYAN}] ${YELLOW}%d%% ${spin[${spin_idx}]}" "$bar" "$((2 * i))"
        ((spin_idx = (spin_idx + 1) % 4))
        sleep 0.03
    done
    echo -e "\n${GREEN}‚úì Completed!${NC}"
}

# Step Log
step() {
    local emoji=$2
    echo -e "\n${YELLOW}${emoji} ‚û§ ${CYAN}$1${NC}"
    sleep 0.3
}

# Retry Installer
install_package() {
    local pkg="$1"
    local max_retries=3
    local attempt=1
    local success=0
    while [[ $attempt -le $max_retries ]]; do
        if [[ "$OS" == "termux" ]]; then
            pkg install -y "$pkg" 2>/dev/null && success=1 && break
        else
            sudo apt install -y "$pkg" 2>/dev/null && success=1 && break
        fi
        echo -e "${RED}‚õî Attempt $attempt failed for $pkg. Retrying...${NC}"
        ((attempt++))
        sleep 1
    done
    [[ $success -eq 1 ]] && echo -e "${GREEN}‚úì $pkg installed successfully${NC}" || echo -e "${RED}‚úó Failed to install $pkg${NC}"
    return $success
}

# Installation Logic
install_refine() {
    [[ "$OS" == "termux" ]] && step "Requesting Storage Permission" "üì±" && termux-setup-storage && sleep 1

    step "Updating package repositories" "üîÑ"
    [[ "$OS" == "termux" ]] && pkg update -y >/dev/null 2>&1 || sudo apt update -y >/dev/null 2>&1

    step "Installing Python" "üêç"
    [[ "$OS" == "termux" ]] && install_package python || install_package python3 || return 1

    step "Installing Git" "üåê"
    install_package git || return 1

    step "Checking for previous installations" "üßπ"
    [[ -d "Contacts-refine" ]] && echo -e "${RED}Removing old repository...${NC}" && rm -rf Contacts-refine

    step "Cloning Contacts-refine repository" "üì•"
    git clone https://github.com/AbdulMods/Contacts-refine.git || return 1

    step "Creating launcher script" "üöÄ"
    echo -e "#!/bin/bash\ncd $(pwd)/Contacts-refine && python Refine.py" > "$BIN_DIR/refine"
    chmod +x "$BIN_DIR/refine" || return 1
    echo -e "${GREEN}‚úì Launcher created at $BIN_DIR/refine${NC}"

    step "Creating required directories" "üìÇ"
    mkdir -p "/storage/emulated/0/Qadeer/Csv"
    mkdir -p "/storage/emulated/0/Qadeer/Refined"
    echo -e "${GREEN}‚úì Created directories${NC}"

    [[ "$OS" == "ubuntu" ]] && sudo apt-get clean >/dev/null

    show_progress "Finalizing installation" "‚ö°"
    return 0
}

# Start Process
echo -e "\n${PURPLE}üöÄ Starting installation process...${NC}"
sleep 1

if install_refine; then
    echo -e "\n${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo -e "‚ïë          üéâ INSTALLATION SUCCESS!        ‚ïë"
    echo -e "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
else
    echo -e "\n${RED}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo -e "‚ïë          ‚ö†Ô∏è INSTALLATION FAILED!         ‚ïë"
    echo -e "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
    exit 1
fi

echo -e "\n${PURPLE}‚îè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îì"
echo -e "‚îÉ  ${CYAN}Tool created by: ${MAGENTA}Abdul Qadeer Gabol     ‚îÉ"
echo -e "‚îÉ  ${CYAN}         (ACCsi Forex Refiner)        ‚îÉ"
echo -e "‚îÉ                                            ‚îÉ"
echo -e "‚îÉ  ${YELLOW}‚ö†Ô∏è ${RED}LEGAL DISCLAIMER: ${ORANGE}Use only for     ‚îÉ"
echo -e "‚îÉ  ${ORANGE}educational purposes. Owner NOT      ‚îÉ"
echo -e "‚îÉ  ${ORANGE}responsible for any misuse.          ‚îÉ"
echo -e "‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îõ${NC}"

# Launch Prompt
if command -v refine &>/dev/null; then
    echo -e "\n${BLUE}üëâ ${CYAN}Press Enter to launch the tool ${GREEN}OR"
    echo -e "${BLUE}üëâ ${CYAN}Type 'refine' anytime to run it${NC}"
    read -p $'\n'"${YELLOW}‚û§ ${CYAN}Launch now? [${GREEN}Y${CYAN}/${RED}n${CYAN}]: ${NC}" launch
    [[ "${launch,,}" != "n" ]] && clear && echo -e "${BLUE}üöÄ Launching Contacts Refiner...${NC}\n" && sleep 1 && refine
else
    echo -e "\n${RED}‚ö†Ô∏è Launcher not found. Try:"
    echo -e "1. Restart your terminal"
    echo -e "2. Run manually: ${CYAN}cd Contacts-refine && python Refine.py${NC}"
fi

echo -e "\n${PURPLE}‚ú® Thanks for using the installer! ‚ú®${NC}"
